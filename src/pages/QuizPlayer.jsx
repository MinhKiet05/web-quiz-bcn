import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import quizService from '../services/quizService';
import { ImageDisplay } from '../utils/imageUtils.jsx';
import './QuizPlayer.css';

const QuizPlayer = () => {
  const { user } = useAuth();
  const [quizzes, setQuizzes] = useState([]);
  const [userAnswers, setUserAnswers] = useState({});
  const [loading, setLoading] = useState(true);
  const [currentAnswers, setCurrentAnswers] = useState({});
  const [weekInfo, setWeekInfo] = useState(null);
  const [savingAnswers, setSavingAnswers] = useState({}); // Track saving state for each quiz

  // Initialize current answers with user answers
  useEffect(() => {
    setCurrentAnswers(userAnswers);
  }, [userAnswers]);

  // L·∫•y quiz v√† th√¥ng tin th·ªùi gian t·ª´ week1 document
  const fetchQuizzes = useCallback(async () => {
    try {
      console.log('üîç Fetching quizzes from week1 document...');
      const quizData = await quizService.getQuizzesFromWeekDocument('week1');
      console.log('üìù All quizzes from week1:', quizData);
      
      // L·∫•y th√¥ng tin th·ªùi gian t·ª´ quiz ƒë·∫ßu ti√™n ho·∫∑c document level
      if (quizData.length > 0) {
        const firstQuiz = quizData[0];
        setWeekInfo({
          week: 1,
          startTime: firstQuiz.startTime,
          endTime: firstQuiz.endTime
        });
      }
      
      // Hi·ªÉn th·ªã t·∫•t c·∫£ quiz, kh√¥ng filter theo th·ªùi gian n·ªØa
      setQuizzes(quizData);
    } catch (error) {
      console.error('Error fetching quizzes:', error);
    }
  }, []);

  const fetchUserAnswers = useCallback(async () => {
    try {
      const answers = await quizService.getUserAnswersByWeek(
        user.studentId || user.uid, 
        1 // Lu√¥n l·∫•y t·ª´ week1
      );
      setUserAnswers(answers);
    } catch (error) {
      console.error('Error fetching user answers:', error);
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    if (user) {
      fetchQuizzes();
      fetchUserAnswers();
    }
  }, [user, fetchQuizzes, fetchUserAnswers]);

  const handleAnswerChange = (quizKey, answer) => {
    setCurrentAnswers({
      ...currentAnswers,
      [quizKey]: answer
    });
  };

  const submitSingleAnswer = async (quizNumber) => {
    try {
      setSavingAnswers(prev => ({ ...prev, [quizNumber]: true }));
      
      const quizKey = `Quiz${quizNumber}`;
      const answer = currentAnswers[quizKey];
      
      if (!answer) {
        alert('Vui l√≤ng ch·ªçn ƒë√°p √°n tr∆∞·ªõc khi l∆∞u!');
        return;
      }
      
      const updatedAnswers = await quizService.saveUserAnswer(
        user.studentId || user.uid,
        1, // Lu√¥n l∆∞u v√†o week1
        quizNumber,
        answer
      );
      
      // Update local state
      setUserAnswers(updatedAnswers);
      
      alert('ƒê√°p √°n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error submitting answer:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u ƒë√°p √°n!');
    } finally {
      setSavingAnswers(prev => ({ ...prev, [quizNumber]: false }));
    }
  };

  const getQuizStatus = (quiz) => {
    const quizNumber = quiz.title?.replace('Quiz', '') || '1';
    const hasAnswer = userAnswers[`Quiz${quizNumber}`];
    
    // Ki·ªÉm tra tr·∫°ng th√°i th·ªùi gian
    const timeStatus = quizService.getQuizTimeStatus(quiz);
    
    if (timeStatus === 'not_started') {
      return 'not_started';
    } else if (timeStatus === 'expired') {
      return 'expired';
    } else if (hasAnswer) {
      return 'completed';
    } else {
      return 'pending';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return '‚úÖ';
      case 'pending':
        return '‚è≥';
      case 'not_started':
        return 'üîí';
      case 'expired':
        return '‚ùå';
      default:
        return 'üìù';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'completed':
        return 'ƒê√£ l√†m';
      case 'pending':
        return 'Ch∆∞a l√†m';
      case 'not_started':
        return 'Ch∆∞a m·ªü';
      case 'expired':
        return 'ƒê√£ h·∫øt h·∫°n';
      default:
        return 'M·ªõi';
    }
  };

  const canTakeQuiz = (quiz) => {
    const timeStatus = quizService.getQuizTimeStatus(quiz);
    return timeStatus === 'available';
  };

  if (loading) {
    return (
      <div className="quiz-player-quiz-player-loading">
        <div className="quiz-player-loading-spinner">üîÑ</div>
        <p>ƒêang t·∫£i quiz...</p>
      </div>
    );
  }

  return (
    <div className="quiz-player">
      <div className="quiz-player-quiz-player-header">
        <h1>üéØ Quiz H√†ng Tu·∫ßn</h1>

        {weekInfo && (
          <div className="quiz-player-week-info">
            <div className="quiz-player-week-number">Week {weekInfo.week}</div>
            <div className="quiz-player-time-info">
              <div className="quiz-player-time-item">
                <span className="quiz-player-time-label"><b>‚è∞ Open:</b></span>
                <span className="quiz-player-time-value">{quizService.formatDateTime(weekInfo.startTime)}</span>
              </div>
              <div className="quiz-player-time-item">
                <span className="quiz-player-time-label"><b>‚è∞ Close:</b></span>
                <span className="quiz-player-time-value">{quizService.formatDateTime(weekInfo.endTime)}</span>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="quiz-player-quiz-grid grid">
        {quizzes.length === 0 ? (
          <div className="quiz-player-no-quiz">
            <div className="quiz-player-no-quiz-icon">üìã</div>
            <h3>Ch∆∞a c√≥ quiz cho tu·∫ßn n√†y</h3>
            <p>Quiz s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm nh·∫•t c√≥ th·ªÉ.</p>
          </div>
        ) : (
          quizzes.map((quiz) => {
            const status = getQuizStatus(quiz);
            const quizNumber = quiz.title?.replace('Quiz', '') || '1';
            const timeStatus = quizService.getQuizTimeStatus(quiz);
            const canTake = canTakeQuiz(quiz);
            
            return (
              <div key={quiz.id} className={`quiz-player-quiz-card ${status}`}>
                <div className="quiz-player-quiz-card-header">
                  <h3>{quiz.title || `Quiz ${quizNumber}`}</h3>
                  <span className="quiz-player-quiz-status">
                    {getStatusIcon(status)} {getStatusText(status)}
                  </span>
                </div>
                
                <div className="quiz-player-quiz-card-content">
                  <div className="quiz-player-quiz-info">
                    <span className="quiz-player-quiz-points">üìä {quizNumber} ƒëi·ªÉm</span>
                  </div>
                  
                  {status === 'completed' && (
                    <div className="quiz-player-current-answer">
                      <strong>ƒê√°p √°n ƒë√£ ch·ªçn:</strong> {userAnswers[`Quiz${quizNumber}`]}
                    </div>
                  )}
                  
                  {!canTake && timeStatus === 'not_started' && (
                    <div className="quiz-player-quiz-locked">
                      üîí Quiz ch∆∞a ƒë∆∞·ª£c m·ªü
                    </div>
                  )}
                  
                  {!canTake && timeStatus === 'expired' && (
                    <div className="quiz-player-quiz-expired">
                      ‚ùå Quiz ƒë√£ h·∫øt h·∫°n
                    </div>
                  )}
                </div>
                
                {/* Quiz Content - Inline Interface */}
                <div className="quiz-player-quiz-content">
                  {quiz.link && (
                    <div className="quiz-player-quiz-image-container">
                      <ImageDisplay 
                        url={quiz.link}
                        alt={`${quiz.title} - H√¨nh ·∫£nh c√¢u h·ªèi`}
                        className="quiz-player-quiz-inline-image"
                      />
                    </div>
                  )}
                  
                  {canTake && (
                    <div className="quiz-player-quiz-options">
                      <label htmlFor={`quiz-${quiz.title || quizNumber}`}>Ch·ªçn ƒë√°p √°n:</label>
                      <select 
                        id={`quiz-${quiz.title || quizNumber}`}
                        value={currentAnswers[quiz.title || `Quiz${quizNumber}`] || ''}
                        onChange={(e) => handleAnswerChange(quiz.title || `Quiz${quizNumber}`, e.target.value)}
                        className="quiz-player-quiz-answer-select"
                      >
                        <option value="">-- Ch·ªçn ƒë√°p √°n --</option>
                        
                        {/* Render options based on soDapAn array or individual options */}
                        {quiz.soDapAn && quiz.soDapAn.length > 0 ? (
                          quiz.soDapAn.map((option, optionIndex) => (
                            <option key={optionIndex} value={String.fromCharCode(65 + optionIndex)}>
                              {String.fromCharCode(65 + optionIndex)}
                            </option>
                          ))
                        ) : (
                          ['A', 'B', 'C', 'D', 'E'].map(letter => {
                            const optionKey = `luaChon${letter}`;
                            const option = quiz[optionKey];
                            return option ? (
                              <option key={letter} value={letter}>
                                {letter}
                              </option>
                            ) : null;
                          })
                        )}
                        
                        {/* Fallback if no options available */}
                        {(!quiz.soDapAn || quiz.soDapAn.length === 0) &&
                         !['A', 'B', 'C', 'D', 'E'].some(letter => quiz[`luaChon${letter}`]) && (
                          <>
                            <option value="A"></option>
                            <option value="B"></option>
                            <option value="C"></option>
                            <option value="D"></option>
                          </>
                        )}
                      </select>
                      
                      <button 
                        onClick={() => submitSingleAnswer(quizNumber)}
                        className="quiz-player-quiz-save-answer-btn"
                        disabled={savingAnswers[quizNumber] || !currentAnswers[quiz.title || `Quiz${quizNumber}`]}
                      >
                        {savingAnswers[quizNumber] ? 'ƒêang l∆∞u...' : 'L∆∞u ƒë√°p √°n'}
                      </button>
                    </div>
                  )}
                  
                  {/* Show current saved answer */}
                  {userAnswers[quiz.title || `Quiz${quizNumber}`] && (
                    <div className="quiz-player-quiz-saved-answer">
                      ƒê√£ l∆∞u: {userAnswers[quiz.title || `Quiz${quizNumber}`]}
                    </div>
                  )}
                </div>
              </div>
            );
          })
        )}
      </div>

    </div>
  );
};

export default QuizPlayer;